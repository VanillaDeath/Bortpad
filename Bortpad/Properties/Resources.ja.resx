<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>{0}について</value>
  </data>
  <data name="AssemblyCompany" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="AssemblyCopyright" xml:space="preserve">
    <value>{0} (令和４年)</value>
  </data>
  <data name="AssemblyDescription" xml:space="preserve">
    <value>C＃で構築されたおなじみのスタイルのテキストエディタ。</value>
  </data>
  <data name="AssemblyProduct" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="AssemblyTitle" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="AssemblyVersion" xml:space="preserve">
    <value>バージョン {0}</value>
  </data>
  <data name="cancelBtn.Text" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="CannotFind" xml:space="preserve">
    <value>「{0}」が見つかりません</value>
  </data>
  <data name="ChooseToEdit" xml:space="preserve">
    <value>このファイルを編集することを選択した場合、保存するときに次のいずれかを行うように求められます。
•読み取り専用フラグの設定を解除します
•新しいドキュメントとして保存</value>
  </data>
  <data name="Col" xml:space="preserve">
    <value>桁</value>
  </data>
  <data name="Confidence" xml:space="preserve">
    <value>自信: {0}％</value>
  </data>
  <data name="ConfigFile" xml:space="preserve">
    <value>{0}.cfg</value>
  </data>
  <data name="ConvertLineEndings" xml:space="preserve">
    <value>このドキュメントの行末文字をすべて{0}に変換しますか？</value>
  </data>
  <data name="ConvertLineEndingsDesc" xml:space="preserve">
    <value>このドキュメントでまだ{0}になっていない行末は、{0}に変換されます</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>既定</value>
  </data>
  <data name="DefaultFilename" xml:space="preserve">
    <value>無題</value>
  </data>
  <data name="Detected" xml:space="preserve">
    <value>検出されました</value>
  </data>
  <data name="dontSaveBtn.Text" xml:space="preserve">
    <value>保存しないでください</value>
  </data>
  <data name="editBtn.Text" xml:space="preserve">
    <value>編集</value>
  </data>
  <data name="FoundNextBottom" xml:space="preserve">
    <value>下から次に見つける</value>
  </data>
  <data name="FoundNextTop" xml:space="preserve">
    <value>上から次に見つかりました</value>
  </data>
  <data name="GotoLine" xml:space="preserve">
    <value>後藤ライン</value>
  </data>
  <data name="InvalidSettingName" xml:space="preserve">
    <value>有効な設定名がありません。</value>
  </data>
  <data name="IsMarkedAsReadOnly" xml:space="preserve">
    <value>{0}は読み取り専用としてマークされています</value>
  </data>
  <data name="LineNumberBeyond" xml:space="preserve">
    <value>値が行の総数を超えています</value>
  </data>
  <data name="Ln" xml:space="preserve">
    <value>行</value>
  </data>
  <data name="okBtn.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="PathNotFound" xml:space="preserve">
    <value>指定されたパスが見つかりません。</value>
  </data>
  <data name="ReadOnlyOptions" xml:space="preserve">
    <value>このファイルを保存するには、次のいずれかを行います
•読み取り専用フラグの設定を解除します
•新しいドキュメントとして保存</value>
  </data>
  <data name="saveAsBtn.Text" xml:space="preserve">
    <value>名前を付けて保存...</value>
  </data>
  <data name="saveBtn.Text" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="SaveChangesTo" xml:space="preserve">
    <value>変更を{0}に保存しますか？</value>
  </data>
  <data name="SettingsKeyNotFound" xml:space="preserve">
    <value>設定ファイル設定「{1}」が見つかりません（セクション「{0}」）。</value>
  </data>
  <data name="SettingsSectionNotFound" xml:space="preserve">
    <value>設定ファイルセクション「{0}」が見つかりません。</value>
  </data>
  <data name="unsetAndSaveBtn.Text" xml:space="preserve">
    <value>設定を解除して保存</value>
  </data>
</root>